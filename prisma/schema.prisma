// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // SQLite locally; you can switch to "postgresql" later by
  // changing provider + DATABASE_URL in .env and running a migrate
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String?  @unique
  name          String?
  image         String?

  // Roles: keep as STRING for SQLite compatibility ("USER" | "ADMIN")
  role          String   @default("USER")

  // Relations (Auth.js + commerce)
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  orders        Order[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String

  // Optional OAuth token fields (kept optional for portability)
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  priceCents  Int      @default(0)
  published   Boolean  @default(false)

  enrollments Enrollment[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Guide {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  priceCents  Int      @default(0)
  published   Boolean  @default(false)

  orders      Order[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Order {
  id           String   @id @default(cuid())
  userId       String?
  guideId      String?
  amountCents  Int
  currency     String   @default("usd")
  status       String   @default("PENDING") // keep string for SQLite
  externalRef  String?
  createdAt    DateTime @default(now())

  user  User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  guide Guide? @relation(fields: [guideId], references: [id], onDelete: SetNull)
}

model Lead {
  id          String   @id @default(cuid())
  name        String?
  email       String
  phone       String?
  eventDate   DateTime?
  message     String?
  source      String?
  createdAt   DateTime @default(now())
}
